#ifndef __ADDON_PROMISE_H__
#define __ADDON_PROMISE_H__

#include <node.h>
#include <uv.h>

// NOTE: This header is generated by the Go build.
#include "../lib/libgo.h"

enum promise_fulfillment_result {
  kPromisePending = 0,
  kPromiseResolve,
  kPromiseReject,
};

struct promise_fulfillment_t {
  enum promise_fulfillment_result   result;
  struct value_t                   *value;
};

struct resolver_state_t {
  v8::Isolate                      *isolate;
  v8::Persistent<
    v8::Promise::Resolver,
    v8::CopyablePersistentTraits<
      v8::Promise::Resolver
    >
  >                                 handle;
};

struct async_state_t {
  struct resolver_state_t           resolver;
  struct promise_fulfillment_t      fulfillment;
  uv_async_t                       *handle;
};

struct promise_state_t {
  bool                              pending;
  struct resolver_state_t           resolver;
  struct async_state_t             *async;    // memory managed separately
};

struct promise_t *AllocPromise(
  v8::Isolate                      *isolate,
  v8::Local<v8::Promise::Resolver>  resolver
);

v8::Local<v8::Promise> GetPromise(struct promise_t *promise);

void FreePromise(struct promise_t *promise);

#endif /* __ADDON_PROMISE_H__ */
