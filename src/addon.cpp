#include <node.h>
#include <stdio.h>
// NOTE: This header is generated by the Go build.
#include "../lib/libgo.h"

#include "./callbacks.h"
#include "./value.h"

using namespace v8;

static void ExampleAsyncMethod(
  const FunctionCallbackInfo<Value> &cb
) {
  struct fn_state_t      *state     = AllocState(cb);
  struct fn_callbacks_t   callbacks = GetCallbacks();
  struct array_t         *args      = AllocArgs(cb);
  struct fn_context_t     ctx       = {
    .state      = state,
    .callbacks  = callbacks,
    .args       = args,
  };

  // exported lib method
  ExAsyncHandler(&ctx);

  FreeState(state);
}

static void ExampleDescribeMethod(
  const FunctionCallbackInfo<Value> &cb
) {
  struct fn_state_t      *state     = AllocState(cb);
  struct fn_callbacks_t   callbacks = GetCallbacks();
  struct array_t         *args      = AllocArgs(cb);
  struct fn_context_t     ctx       = {
    .state      = state,
    .callbacks  = callbacks,
    .args       = args,
  };

  // exported lib method
  ExDescribeHandler(&ctx);

  FreeState(state);
}

void Initialize(Local<Object> exports) {
  NODE_SET_METHOD(exports, "async",     ExampleAsyncMethod);
  NODE_SET_METHOD(exports, "describe",  ExampleDescribeMethod);
}

NODE_MODULE(NODE_GYP_MODULE_NAME, Initialize)
